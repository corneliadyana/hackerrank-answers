/* answers to basic join in mysql, not yet completed */

/* asian population */
SELECT SUM(CITY.POPULATION)
FROM CITY 
JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE 
WHERE COUNTRY.CONTINENT = 'Asia';

/* african cities */
SELECT CITY.NAME
FROM CITY 
JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE 
WHERE COUNTRY.CONTINENT = 'Africa';

/* average population of each continent */
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM CITY 
JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE 
GROUP BY COUNTRY.CONTINENT;

/* the report  */
SELECT IF (GRADE<8, NULL, NAME), GRADE, MARKS
FROM STUDENTS JOIN GRADES 
ON MARKS >= MIN_MARK AND MARKS <= MAX_MARK
GROUP BY GRADE DESC, NAME, MARKS ASC

/* contest leaderboard */
SELECT HACC.HACKER_ID, HACC.NAME, SUM(SCORE)
FROM (
    SELECT HACKER_ID, CHALLENGE_ID, MAX(SCORE) AS SCORE 
    FROM SUBMISSIONS
    GROUP BY HACKER_ID, CHALLENGE_ID)J
JOIN HACKERS HACC ON J.HACKER_ID = HACC.HACKER_ID
GROUP BY HACC.HACKER_ID, HACC.NAME
HAVING SUM(SCORE) > 0
ORDER BY SUM(SCORE) DESC, HACC.HACKER_ID

/* top competitors */
SELECT SUBS.HACKER_ID, H.NAME
FROM SUBMISSIONS SUBS
    JOIN CHALLENGES C ON SUBS.CHALLENGE_ID = C.CHALLENGE_ID
    JOIN DIFFICULTY D ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
    JOIN HACKERS H ON SUBS.HACKER_ID = H.HACKER_ID 
WHERE SUBS.SCORE = D.SCORE
GROUP BY H.HACKER_ID, H.NAME
HAVING COUNT(SUBS.HACKER_ID) > 1
ORDER BY COUNT(SUBS.HACKER_ID) DESC, SUBS.HACKER_ID

/* olliviander's inventory */

/* challenges */
